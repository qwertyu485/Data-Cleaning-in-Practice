# -*- coding: utf-8 -*-
"""AppliedDS-Data Cleaning 02

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14zaq-29eqB2iVYwX2K_INq0Tp4_o8Uqz
"""

"""Creating new data
"""



import pandas as pd
import numpy as np
# Sample data creation: A DataFrame with various issues to clean
data = {
    'Name': ['Alice', 'Bob', None, 'David', 'Eve', 'Frank', 'Grace', 'Hannah', np.nan, 'Ivan'],
    'Age': [25, np.nan, 22, 35, 28, None, 40, 29, 31, 'thirty-two'],  # Note the string 'thirty-two'
    'Email': ['alice@example.com', 'bob@example.com', 'charlie@example', None, 'eve@example.com',
              'frank@sample.com', 'grace@example.com', 'hannah@example.com', 'ivan@example.com', 'ivan@example.com'],
    'JoinDate': ['2021-01-15', '2021/02/20', '15-03-2021', '2021-04-25', None,
                 '2021-06-30', '2021-07-15', '2021-08-01', '2021-09-01', '2021-09-01'],
    'Score': [85, 90, None, 88, 92, 95, 85, 90, 88, 85],
    'Active': ['yes', 'no', 'yes', 'yes', 'no', 'yes', 'yes', 'no', 'yes', 'yes']
}
df = pd.DataFrame(data)
# Show the initial messy data
print("Original Data:")
print(df)
print("\n\n")

# ----------------------------
# 1. Handling Missing Values
# ----------------------------
# Check for missing values in each column
print("Missing values per column:")
print(df.isnull().sum())
print("\n")

# Convert 'Age' to numeric, coercing invalid parsing to NaN, we lost the information thirty two because it's not numeric and can't convert to numbers
df['Age'] = pd.to_numeric(df['Age'], errors='coerce')

# Fill missing 'Age' with the median age
median_age = df['Age'].median()
df['Age'] = df['Age'].fillna(median_age)

# Fill missing 'Name' with a placeholder
df['Name'] = df['Name'].fillna('Unknown')

# Fill missing 'JoinDate' with the mode (most frequent date)
mode_joindate = df['JoinDate'].mode()[0]
df['JoinDate'] = df['JoinDate'].fillna(mode_joindate)
print("After filling missing values:")
print(df)
print("\n\n")

# ----------------------------
# 2. Fixing Data Types
# ----------------------------
# Convert 'JoinDate' to datetime format (handle multiple formats)
df['JoinDate'] = pd.to_datetime(df['JoinDate'], errors='coerce')
# Convert 'Active' from string to boolean (yes/no -> True/False)
df['Active'] = df['Active'].map({'yes': True, 'no': False})#convert to boolean

print("Data types after conversion:")
print(df.dtypes)
print("\n\n")#object as text and can't be multiplied

# ----------------------------
# 3. Removing Duplicate Rows
# ----------------------------
print(f"Number of rows before dropping duplicates: {len(df)}")
df.drop_duplicates(inplace=True)
print(f"Number of rows after dropping duplicates: {len(df)}")
print("\n\n")

# ----------------------------
# 4. Handling Outliers
# ----------------------------
# Basic outlier detection: Find ages outside reasonable range (e.g., 0-120)
outliers = df[(df['Age'] < 0) | (df['Age'] > 120)]
print("Outliers in 'Age' column:")
print(outliers)

# ----------------------------
# 5. Standardizing Text Data
# ----------------------------
# Strip leading/trailing spaces and convert 'Name' to title case
df['Name'] = df['Name'].str.strip().str.title()
# Fix email formatting: lowercase and strip spaces
df['Email'] = df['Email'].str.lower().str.strip()
# Check for invalid email formats (basic regex), handle missing with na=False
invalid_emails = df[~df['Email'].str.contains(r'^[\w\.-]+@[\w\.-]+\.\w+$', regex=True, na=False)]
print("Invalid emails detected:")
print(invalid_emails[['Email']])
print("\n")

# ----------------------------
# 6. Feature Engineering (Derived Columns)
# ----------------------------
# Create 'TenureDays' = days from JoinDate to today
today = pd.Timestamp('2025-09-23')  # fixed date for this example
df['TenureDays'] = (today - df['JoinDate']).dt.days
# ----------------------------
# 7. Handling Categorical Variables
# ----------------------------
# Convert 'Active' boolean to int (True -> 1, False -> 0)
df['ActiveInt'] = df['Active'].astype(int)

# ----------------------------
# 8. Reordering Columns for Clarity
# ----------------------------
cols = ['Name', 'Age', 'Email', 'JoinDate', 'TenureDays', 'Score', 'Active', 'ActiveInt']
df = df[cols]
# ----------------------------
# 9. Final Cleaned Data Output
# ----------------------------
print("Cleaned Data:")
print(df)